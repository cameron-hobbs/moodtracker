# Generated by Django 4.1.3 on 2022-12-16 18:57

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import patient.repository


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_diagnosis', models.CharField(max_length=180)),
                ('primary_contact_no', models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('receive_mood_tracker_sms', models.BooleanField(default=True)),
                ('last_sms_sent', models.DateField(null=True)),
                ('date_of_birth', models.DateField(null=True)),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('secondary_contact_no', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address', models.CharField(blank=True, max_length=2000, null=True)),
                ('occupation', models.CharField(blank=True, max_length=180, null=True)),
                ('allergies', models.CharField(blank=True, max_length=2000, null=True)),
                ('current_medication', models.CharField(blank=True, max_length=180, null=True)),
                ('other_notes', models.CharField(blank=True, max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientSupport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=180, null=True)),
                ('primary_contact_no', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('secondary_contact_no', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(blank=True, max_length=180, null=True)),
                ('address', models.CharField(blank=True, max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WeightLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('kilograms', models.IntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='weight_log', to='patient.patient')),
            ],
        ),
        migrations.AddField(
            model_name='patient',
            name='gp',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gp', to='patient.patientsupport'),
        ),
        migrations.AddField(
            model_name='patient',
            name='next_of_kin',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='next_of_kin', to='patient.patientsupport'),
        ),
        migrations.AddField(
            model_name='patient',
            name='physciatrist',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='physciatrist', to='patient.patientsupport'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=180)),
                ('last_name', models.CharField(max_length=180)),
                ('clinician', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='clients', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('patient', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='patient.patient')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', patient.repository.CustomUserRepository()),
            ],
        ),
        migrations.AddIndex(
            model_name='weightlog',
            index=models.Index(fields=['patient', 'date'], name='patient_date_index'),
        ),
        migrations.AddConstraint(
            model_name='weightlog',
            constraint=models.UniqueConstraint(fields=('date', 'kilograms', 'patient'), name='weight_log_record_unique'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['receive_mood_tracker_sms', 'last_sms_sent'], name='patient_pat_receive_6dc8bb_idx'),
        ),
        migrations.AddConstraint(
            model_name='customuser',
            constraint=models.UniqueConstraint(fields=('patient', 'clinician'), name='patient_clinician_unique'),
        ),
    ]
